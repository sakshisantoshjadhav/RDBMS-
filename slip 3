Consider the following database 
Customer (cno integer, cname varchar(20), city varchar(20)) 
Account (a_no int, a_type varchar(10), opening_date date, balance money) 
Customer and Account are related with one to many relationship 

create table customer(cno int primary key,cname varchar(20),city varchar(20));

create table account(a_no int,a_type varchar(20),opening_date date,balance money,cno int references customer);

insert into customer values(1,'sakshi','pune');
insert into customer values(2,'gayatri','mumbai');
insert into customer values(3,'rohini','nashik');
insert into customer values(4,'sarita','delhi');
insert into customer values(5,'kajal','surat');
select * from customer;

insert into account values(101,'saving','2024-12-2','5000',1);
insert into account values(102,'current','2023-11-3','6000',2);
insert into account values(103,'saving','2024-4-5','7000',3);
insert into account values(104,'current','2024-7-9','8000',4);
insert into account values(105,'saving','2024-11-8','9000',5);
select * from account;


a)Write a function which accepts account no as input and prints 
the details of that account. 

create or replace function sakshi(accountno account.a_no%type) returns void as
$$
declare
r1 account%rowtype;
begin
select * into r1 from account where accountno=account.a_no;
raise notice'account no=%',r1.a_no;
raise notice'account type=%',r1.a_type;
raise notice'account date=%',r1.opening_date;
raise notice'account type=%',r1.balance;
end;
$$
language plpgsql;

b). Write a function using cursor which accepts customer name and 
prints all account details of that customer. If the customer name 
is invalid, print appropriate message. 


create or replace function disp_customer(customername customer.cname%type) returns void as
$$
declare
r1 account%rowtype;
c1 cursor for select account From customer,account where customer.cno=account.cno and customername=customer.cname;
begin
loop
open c1;
fetch c1 into r1;
exit when not found;
raise notice'account no=%',r1.a_no;
raise notice'account type=%',r1.a_type;
raise notice'account date=%',r1.opening_date;
raise notice'account type=%',r1.balance;
end loop;
close c1;
end;
$$
language plpgsql;


c). Write a trigger which is executed whenever update is made to 
the account table. If the balance becomes less than 1000, print an 
error message that balance cannot be less than 1000.

create or replace function disp() returns trigger as
$$
declare
begin
if new.balance<'1000' then
raise exception'balance become less than1000 not allowed....';
end if;
return new;
end;
$$
language plpgsql;

create trigger t7
before update on account
for each row execute procedure disp();






 

