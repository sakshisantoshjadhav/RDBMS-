Consider the following database 
Project (pno int, pname char (30), ptype char (20), duration int) 
Employee (eno int, ename char (20), salary float, joining_date date) 
Relationship between Project and Employee is many to many with descriptive attribute 
start_date

create table project(pno int primary key,pname varchar(20),ptype varchar(20),duration int);

create table employee(eno int primary key,ename varchar(20),qualification varchar(15),salary float, joining_date date);

create table PE(pno int references project,eno int references employee,start_date date,no_of_hours int);

insert into project values(101,'danish','eduacational',3);
insert into project values(102,'satish','system',5);
insert into project values(103,'alok','robotics',4);
insert into project values(104,'amol','networks',2);
insert into project values(105,'database','industrial',1);

insert into employee values(1000,'danish','mcs',50000,'2011-11-21');
insert into employee values(1500,'satish','mca',60000,'2010-01-01');
insert into employee values(2000,'amol','bcs',70000,'2012-06-01');
insert into employee values(2500,'amok','mcs',80000,'2013-02-01');
insert into employee values(3000,'nitesh','mca',90000,'2016-10-21');

insert into PE values(101,1000,'2014-01-21',500);
insert into PE values(102,1500,'2010-01-01',100);
insert into PE values(103,2000,'2012-06-01',200);
insert into PE values(104,3000,'2013-02-02',300);
insert into PE values(105,4000,'2014-09-05',400);

select * from project;
select * from employee;
select * from PE;


a)Write a cursor to accept the employee name as an input parameter 
and displays the names of projects of that employee.

create or replace function em1(ename1 employee.ename%type)returns void as
$$
declare
r1 project.pname%type;
c1 cursor for select pname from employee,project,PE where employee.eno=PE.eno and project.pno=PE.pno and ename1=ename;
begin
open c1;
loop
fetch c1 into r1;
exit when not found;
raise notice'pname=%',r1;
end loop;
close c1;
end;
$$
language plpgsql;

b). Write a stored function to count all employees who have joined 
before â€˜01/02/2010'

create or replace function emp2()returns int as
$$
declare
cnt int;
begin
select count(*)into cnt from employee where joining_date<'2013-02-01';
return cnt;
end;
$$
language plpgsql;

c). Write a trigger which ensures that if an employee's salary entered 
less than zero, the trigger gets fired


create or replace function emp()returns trigger as
$$
declare
begin
if(new.salary<0)then
raise exception'salary less than zero not allowed..';
end if;
return new;
end;
$$
language plpgsql;

create trigger s3
before insert on employee
for each row execute procedure emp();























