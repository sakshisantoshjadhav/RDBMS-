Consider the following database 
Student (Roll_No int, Sname varchar (20), Sclass char (10)) 
Teacher (T_No int, Tname char (20), Experience int) 
Student and Teacher are related with many to many relationship with the descriptive attribute Subject.


create table student(rollno int primary key,sname varchar(20),sclass varchar(20));

create table teacher(t_no int primary key,t_name varchar(20),Experience int);

create table st(sno int references student,tno int references teacher,subject varchar(20));

insert into student values(101,'om','fy');
insert into student values(102,'sai','fy');
insert into student values(103,'ram','sy');

insert into teacher values(01,'mr.joshi',5);
insert into teacher values(02,'mr.navle',6);
insert into teacher values(03,'mr.joshi',7);

insert into st values(101,01,'ds');
insert into st values(102,02,'php');
insert into st values(103,01,'rdbms');

select * from student;
select * from teacher;
select * from st;


a)Write a trigger before insert the record of the student in the Student 
table. If the Roll_No is less than or equal to zero then the trigger 
gets fired and displays the message “Invalid Roll Number”.

create or replace function disp_student3()returns trigger as
$$
declare
begin
if (new.rollno<=0)then
raise exception'rollno less then 0 not allowed...';
end if;
return new;
end;
$$
language plpgsql;

create trigger t6
before insert on student
for each row execute procedure disp_student3();



b). Write a cursor to accept the student's name from the user as an 
input and display names of all teachers teaching that student.

create or replace function dis(sname1 student.sname%type)returns void as
$$
declare
r1 teacher.t_name%type;
c1 cursor for select t_name from teacher,student,st where teacher.tno=st.tno and student.sno=st.sno and sname=sanme1;
begin
open c1;
loop
fetch c1 into r1;
exit when not found;
raise notice'teacher name=%',t_name;
end loop;
close c1;
end;
$$
language plpgsql;

c). Write a stored function to count the number of teachers having 
experience > 10 years

create or replace function teacher1()returns int as
$$
declare
cnt int;
begin
select count(*) into cnt from teacher where experience>5;
return cnt;
end;
$$
language plpgsql;











